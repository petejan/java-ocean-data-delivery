/*
 * This code is copyright Peter Wiley 1998-2008
 * It is made available under the BSD Software Licence in the hope that it may be useful.
 * It has NO WARRANTY OF FITNESS OR SUITABILITY FOR ANY PURPOSE.
 * Feel free to fix any bugs that you may find.
 *
 */
package org.imos.dwm.forms;

import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import org.apache.log4j.Logger;
import org.imos.dwm.dbms.Instrument;
import org.imos.dwm.dbms.InstrumentCalibrationFile;
import org.imos.dwm.dbms.InstrumentCalibrationValue;
import org.imos.dwm.dbms.Mooring;
import org.wiley.core.Common;

/**
 *
 * @author peter
 */
public class CalibrationValuesCloneForm extends javax.swing.JDialog
{

    private static Logger logger = Logger.getLogger(CalibrationValuesCloneForm.class.getName());

    private JFrame parentFrame;
    
    private Mooring sourceMooring =null;
    private Mooring targetMooring =null;
    private Instrument sourceInstrument = null;
    private Instrument targetInstrument = null;
    /**
     * Creates new form CalibrationValuesCloneForm
     */
    public CalibrationValuesCloneForm(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourceInstrumentCombo = new org.imos.dwm.dbms.fields.InstrumentSelectorCombo();
        targetInstrumentCombo = new org.imos.dwm.dbms.fields.InstrumentSelectorCombo();
        sourceMooringCombo = new org.imos.dwm.dbms.fields.MooringCombo();
        mooringDescriptionField = new org.wiley.util.basicField();
        jPanel2 = new javax.swing.JPanel();
        runButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        targetMooringCombo = new org.imos.dwm.dbms.fields.MooringCombo();
        mooringDescriptionField1 = new org.wiley.util.basicField();
        targetCalibrationFileCombo = new org.imos.dwm.dbms.fields.CalibrationFileCombo();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clone Calibration Values for File/Mooring");

        sourceInstrumentCombo.setLabel("Source Instrument");
        sourceInstrumentCombo.setOrientation(0);

        targetInstrumentCombo.setLabel("Target Instrument");
        targetInstrumentCombo.setOrientation(0);
        targetInstrumentCombo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                targetInstrumentComboPropertyChange(evt);
            }
        });

        sourceMooringCombo.setOrientation(0);
        sourceMooringCombo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                sourceMooringComboPropertyChange(evt);
            }
        });

        mooringDescriptionField.setEnabled(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        jPanel2.add(runButton);

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });
        jPanel2.add(quitButton);

        targetMooringCombo.setOrientation(0);
        targetMooringCombo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                targetMooringComboPropertyChange(evt);
            }
        });

        mooringDescriptionField1.setEnabled(false);

        targetCalibrationFileCombo.setLabel("Target Cal File");
        targetCalibrationFileCombo.setOrientation(0);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(26, 26, 26)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(targetMooringCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 169, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mooringDescriptionField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 343, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, sourceInstrumentCombo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(sourceMooringCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 169, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mooringDescriptionField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 343, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, targetInstrumentCombo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(targetCalibrationFileCombo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(sourceMooringCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mooringDescriptionField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sourceInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(33, 33, 33)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(targetMooringCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mooringDescriptionField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(targetInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(targetCalibrationFileCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 46, Short.MAX_VALUE)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourceMooringComboPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_sourceMooringComboPropertyChange
    {//GEN-HEADEREND:event_sourceMooringComboPropertyChange
        String propertyName = evt.getPropertyName();
        //logger.debug(evt.getPropertyName());
        if (propertyName.equalsIgnoreCase("MOORING_SELECTED"))
        {
            Mooring selectedItem = (Mooring) evt.getNewValue();
            ArrayList<Instrument> set = Instrument.selectInstrumentsWithCalibrationFilesForMooring(selectedItem);
            sourceInstrumentCombo.setInstrumentDataSet(set);
        }
    }//GEN-LAST:event_sourceMooringComboPropertyChange

    public void setParentFrame(JFrame f)
    {
        parentFrame = f;
    }
    
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_runButtonActionPerformed
    {//GEN-HEADEREND:event_runButtonActionPerformed

        sourceInstrument = sourceInstrumentCombo.getSelectedInstrument();
        targetInstrument = targetInstrumentCombo.getSelectedInstrument();

        sourceMooring = sourceMooringCombo.getSelectedMooring();

        if (sourceMooring == null)
        {
            Common.showMessage(parentFrame, "No Mooring Selected", "You must select a source mooring before running any calculations");
            return;
        }
        
        targetMooring = targetMooringCombo.getSelectedMooring();

        if (targetMooring == null)
        {
            Common.showMessage(parentFrame, "No Mooring Selected", "You must select a target mooring before running any calculations");
            return;
        }

        

        final Color bg = runButton.getBackground();
        runButton.setText("Running...");
        runButton.setBackground(Color.RED);
        runButton.setForeground(Color.WHITE);

        
        Thread worker = new Thread()
        {

            @Override
            public void run()
            {
                cloneValuesForInstrumentAndMooring();
                SwingUtilities.invokeLater(new Runnable()
                {

                    @Override
                    public void run()
                    {
                        runButton.setBackground(bg);
                        runButton.setForeground(Color.BLACK);
                        runButton.setText("Run");
                        repaint();
                    }
                });
            }
        };

        worker.start();
    }//GEN-LAST:event_runButtonActionPerformed

    private void cloneValuesForInstrumentAndMooring()
    {
        ArrayList<InstrumentCalibrationValue> sourceData = InstrumentCalibrationValue.selectByInstrumentAndMooring(sourceInstrument.getInstrumentID(), sourceMooring.getMooringID());
        
        if(sourceData != null)
        {
            InstrumentCalibrationFile calFile = targetCalibrationFileCombo.getSelectedFile();
            
            if(calFile != null)
            {
                for(int i = 0; i < sourceData.size(); i++)
                {
                    InstrumentCalibrationValue calValue = sourceData.get(i);
                    
                    calValue.setInstrumentID(calFile.getInstrumentID());
                    calValue.setDataFilePrimaryKey(calFile.getDataFilePrimaryKey());
                    calValue.setMooringID(targetMooring.getMooringID());
                    
                    calValue.insert();
                }
            }
        }
    }
    
    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitButtonActionPerformed
    {//GEN-HEADEREND:event_quitButtonActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void targetMooringComboPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_targetMooringComboPropertyChange
    {//GEN-HEADEREND:event_targetMooringComboPropertyChange
        String propertyName = evt.getPropertyName();
        //logger.debug(evt.getPropertyName());
        if (propertyName.equalsIgnoreCase("MOORING_SELECTED"))
        {
            Mooring selectedItem = (Mooring) evt.getNewValue();
            ArrayList<Instrument> set = Instrument.selectInstrumentsWithCalibrationFilesAttachedToMooring(selectedItem.getMooringID());
            targetInstrumentCombo.setInstrumentDataSet(set);
        }
    }//GEN-LAST:event_targetMooringComboPropertyChange

    private void targetInstrumentComboPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_targetInstrumentComboPropertyChange
    {//GEN-HEADEREND:event_targetInstrumentComboPropertyChange
        String propertyName = evt.getPropertyName();
        //logger.debug(evt.getPropertyName());
        if (propertyName.equalsIgnoreCase("INSTRUMENT_SELECTED"))
        {
            Instrument selectedItem = (Instrument) evt.getNewValue();
            targetCalibrationFileCombo.setSelectedInstrument(selectedItem);
        }
    }//GEN-LAST:event_targetInstrumentComboPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(CalibrationValuesCloneForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(CalibrationValuesCloneForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(CalibrationValuesCloneForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(CalibrationValuesCloneForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                CalibrationValuesCloneForm dialog = new CalibrationValuesCloneForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private org.wiley.util.basicField mooringDescriptionField;
    private org.wiley.util.basicField mooringDescriptionField1;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton runButton;
    private org.imos.dwm.dbms.fields.InstrumentSelectorCombo sourceInstrumentCombo;
    private org.imos.dwm.dbms.fields.MooringCombo sourceMooringCombo;
    private org.imos.dwm.dbms.fields.CalibrationFileCombo targetCalibrationFileCombo;
    private org.imos.dwm.dbms.fields.InstrumentSelectorCombo targetInstrumentCombo;
    private org.imos.dwm.dbms.fields.MooringCombo targetMooringCombo;
    // End of variables declaration//GEN-END:variables
}
