/*
 * IMOS Data Delivery Project
 * Written by Peter Wiley
 * This code is copyright (c) Peter Wiley 2000 - ?
 * It is made available under the BSD Software Licence in the hope that it may be useful.
 * It has NO WARRANTY OF FITNESS OR SUITABILITY FOR ANY PURPOSE.
 * Feel free to fix any bugs that you may find.
 */

/*
 * SBE16CalculationForm.java
 *
 * Created on 8 June 2013
 */

package org.imos.dwm.forms;

import java.awt.Color;
import java.io.IOException;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.TimeZone;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.imos.dwm.dbms.Instrument;
import org.imos.dwm.dbms.Mooring;
import org.imos.dwm.dbms.RawInstrumentData;
import org.imos.dwm.instrument.AanderraOptodeConstants;
import org.wiley.core.Common;
import org.wiley.core.forms.MemoryWindow;
import org.wiley.util.StringUtilities;
import org.wiley.util.TextFileLogger;

/**
 *
 * @author peter
 */
public class SBE16CalculationForm extends MemoryWindow implements DataProcessor
{

    private static Logger logger = Logger.getLogger(SBE16CalculationForm.class.getName());

    private Mooring selectedMooring =null;
    private Instrument sourceInstrument = null;
    private Instrument PARInstrument = null;
    private Instrument SBE43Instrument = null;
    private Instrument FLNTUSInstrument = null;
    private Instrument OptodeInstrument = null;
    private Instrument GTDInstrument = null;
    
    private AanderraOptodeConstants constants = null;

    private ArrayList<SBE16Data> dataSet = new ArrayList();

    /** Creates new form SBE16CalculationForm */
    public SBE16CalculationForm()
    {
        TimeZone.setDefault(TimeZone.getTimeZone("GMT"));
    }

    @Override
    public void initialise()
    {
        initComponents();
        
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        mooringCombo1 = new org.imos.dwm.dbms.fields.MooringCombo();
        mooringDescriptionField = new org.wiley.util.basicField();
        sourceInstrumentCombo = new org.imos.dwm.dbms.fields.InstrumentSelectorCombo();
        SBE43InstrumentCombo = new org.imos.dwm.dbms.fields.InstrumentSelectorCombo();
        deleteDataBox = new javax.swing.JCheckBox();
        PARInstrumentCombo = new org.imos.dwm.dbms.fields.InstrumentSelectorCombo();
        OptodeInstrumentCombo = new org.imos.dwm.dbms.fields.InstrumentSelectorCombo();
        FLNTUSInstrumentCombo = new org.imos.dwm.dbms.fields.InstrumentSelectorCombo();
        GTDInstrumentCombo = new org.imos.dwm.dbms.fields.InstrumentSelectorCombo();
        jCheckBoxOxygen = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        runButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();

        setTitle("SBE16 Extract Form");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mooringCombo1.setDescriptionField(mooringDescriptionField);
        mooringCombo1.setOrientation(0);
        mooringCombo1.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                mooringCombo1PropertyChange(evt);
            }
        });

        mooringDescriptionField.setEnabled(false);

        sourceInstrumentCombo.setLabel("Source Instrument");
        sourceInstrumentCombo.setOrientation(0);

        SBE43InstrumentCombo.setLabel("SBE43 Instrument");
        SBE43InstrumentCombo.setOrientation(0);

        deleteDataBox.setSelected(true);
        deleteDataBox.setText("Delete any existing processed data for target instrument");
        deleteDataBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteDataBoxActionPerformed(evt);
            }
        });

        PARInstrumentCombo.setLabel("PAR Instrument");
        PARInstrumentCombo.setOrientation(0);

        OptodeInstrumentCombo.setLabel("Optode Instrument");
        OptodeInstrumentCombo.setOrientation(0);

        FLNTUSInstrumentCombo.setLabel("FLNTUS Instrument");
        FLNTUSInstrumentCombo.setOrientation(0);

        GTDInstrumentCombo.setLabel("GTD Instrument");
        GTDInstrumentCombo.setOrientation(0);

        jCheckBoxOxygen.setText("Oxygen Output");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(GTDInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 562, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(mooringCombo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 169, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mooringDescriptionField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 343, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(sourceInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 562, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(SBE43InstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 562, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(PARInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 562, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(FLNTUSInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 562, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(OptodeInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 428, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jCheckBoxOxygen))))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(36, 36, 36)
                        .add(deleteDataBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 398, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(410, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, mooringCombo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, mooringDescriptionField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(sourceInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(SBE43InstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(FLNTUSInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(PARInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(OptodeInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCheckBoxOxygen))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(GTDInstrumentCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(deleteDataBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(218, 218, 218))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                runButtonActionPerformed(evt);
            }
        });
        jPanel2.add(runButton);

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitButtonActionPerformed(evt);
            }
        });
        jPanel2.add(quitButton);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        getAccessibleContext().setAccessibleName("SBE16 Extraction Processing Form");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        cleanup();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cleanup();
    }//GEN-LAST:event_formWindowClosing

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed

        sourceInstrument = sourceInstrumentCombo.getSelectedInstrument();
        SBE43Instrument = SBE43InstrumentCombo.getSelectedInstrument();
        PARInstrument = PARInstrumentCombo.getSelectedInstrument();
        FLNTUSInstrument = FLNTUSInstrumentCombo.getSelectedInstrument();
        OptodeInstrument = OptodeInstrumentCombo.getSelectedInstrument();
        GTDInstrument = GTDInstrumentCombo.getSelectedInstrument();

        selectedMooring = mooringCombo1.getSelectedMooring();

        if(selectedMooring == null)
        {
            Common.showMessage(this,"No Mooring Selected","You must select a mooring before running any calculations");
            return;
        }

        if(deleteDataBox.isSelected())
        {
            RawInstrumentData.deleteDataForMooringAndInstrument(selectedMooring.getMooringID(),
                                                                      SBE43Instrument.getInstrumentID())
                                                                      ;
            RawInstrumentData.deleteDataForMooringAndInstrument(selectedMooring.getMooringID(),
                                                                      PARInstrument.getInstrumentID())
                                                                      ;
            RawInstrumentData.deleteDataForMooringAndInstrument(selectedMooring.getMooringID(),
                                                                      FLNTUSInstrument.getInstrumentID())
                                                                      ;
            RawInstrumentData.deleteDataForMooringAndInstrument(selectedMooring.getMooringID(),
                                                                      OptodeInstrument.getInstrumentID())
                                                                      ;
            RawInstrumentData.deleteDataForMooringAndInstrument(selectedMooring.getMooringID(),
                                                                      GTDInstrument.getInstrumentID())
                                                                      ;
        }

        final Color bg = runButton.getBackground();
        runButton.setText("Running...");
        runButton.setBackground(Color.RED);
        runButton.setForeground(Color.WHITE);

        String insProc = "INSERT INTO instrument_data_processors (processors_pk, mooring_id, class_name, parameters, processing_date, display_code) VALUES ("
     + "nextval('instrument_data_processor_sequence'),"
     + "'" + selectedMooring.getMooringID() + "',"
     + "'" + this.getClass().getName() + "',"
     + "'" + paramToString() + "',"
     + "'" + Common.current() + "',"
     + "'Y'"
     + ")";

        Connection conn = Common.getConnection();

        Statement stmt;
        try
        {
           stmt = conn.createStatement();
           stmt.executeUpdate(insProc);            
        }
        catch (SQLException ex)
        {
            logger.error(ex);
        }                                         
                
        Thread worker = new Thread()
        {
            @Override
            public void run()
            {
                calculateDataValues();
                displayData();

                SwingUtilities.invokeLater(new Runnable()
                {
                @Override
                    public void run()
                    {
                        runButton.setBackground(bg);
                        runButton.setForeground(Color.BLACK);
                        runButton.setText("Run");
                        repaint();
                    }
                });
            }
        };

        worker.start();      
        
    }//GEN-LAST:event_runButtonActionPerformed

    private void mooringCombo1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_mooringCombo1PropertyChange
        String propertyName = evt.getPropertyName();
        //logger.debug(evt.getPropertyName());
        if(propertyName.equalsIgnoreCase("MOORING_SELECTED")) {
            Mooring selectedItem = (Mooring) evt.getNewValue();
            sourceInstrumentCombo.setMooring(selectedItem);
            SBE43InstrumentCombo.setMooring(selectedItem);
            PARInstrumentCombo.setMooring(selectedItem);
            FLNTUSInstrumentCombo.setMooring(selectedItem);
            OptodeInstrumentCombo.setMooring(selectedItem);
            GTDInstrumentCombo.setMooring(selectedItem);
        }
    }//GEN-LAST:event_mooringCombo1PropertyChange

    private void deleteDataBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_deleteDataBoxActionPerformed

    public void calculateDataValues()
    {
        Connection conn = null;
        Statement proc = null;
        ResultSet results = null;

        try
        {
            // need something like?
            // SELECT time, value AS BatteryVoltage INTO TEMP sofs2 FROM data WHERE obs_code='BatteryVoltage' AND set_code = 1011 AND time BETWEEN :s AND :e ORDER BY time, set_code;

            // ALTER TABLE sofs2 ADD SignificantWaveHeight  numeric;
            // UPDATE sofs2 SET SignificantWaveHeight = d.value FROM data d WHERE d.time = sofs2.time AND obs_code='SignificantWaveHeight';

            String tab;
            conn = Common.getConnection();
            conn.setAutoCommit(false);
            proc = conn.createStatement();
            if (GTDInstrument != null)
            {
                proc.execute("UPDATE raw_instrument_data SET instrument_id = " +  GTDInstrument.getInstrumentID() +
                            " WHERE mooring_id = "+StringUtilities.quoteString(selectedMooring.getMooringID())+" AND instrument_id = "+ sourceInstrument.getInstrumentID() + " AND parameter_code = 'GTD_TEMPERATURE' " +
                            "");
                proc.execute("UPDATE raw_instrument_data SET instrument_id = " +  GTDInstrument.getInstrumentID() +
                            " WHERE mooring_id = "+StringUtilities.quoteString(selectedMooring.getMooringID())+" AND instrument_id = "+ sourceInstrument.getInstrumentID() + " AND parameter_code = 'TOTAL_GAS_PRESSURE' " +
                            "");
            }
            
            tab = "SELECT data_timestamp, source_file_id, instrument_id, depth, parameter_value as volt1 INTO TEMP sbe16 FROM raw_instrument_data WHERE parameter_code = 'VOLT1' AND mooring_id = "+StringUtilities.quoteString(selectedMooring.getMooringID())+" AND instrument_id = "+ sourceInstrument.getInstrumentID()+" ORDER BY data_timestamp";                
            proc.execute(tab);
            
            tab = "ALTER TABLE sbe16 ADD volt2  numeric";
            proc.execute(tab);            
            tab = "UPDATE sbe16 SET volt2 = d.parameter_value FROM raw_instrument_data d WHERE d.data_timestamp = sbe16.data_timestamp AND parameter_code = 'VOLT2' AND d.instrument_id = sbe16.instrument_id";                
            proc.execute(tab);

            tab = "ALTER TABLE sbe16 ADD volt3  numeric";
            proc.execute(tab);            
            tab = "UPDATE sbe16 SET volt3 = d.parameter_value FROM raw_instrument_data d WHERE d.data_timestamp = sbe16.data_timestamp AND parameter_code = 'VOLT3' AND d.instrument_id = sbe16.instrument_id";                
            proc.execute(tab);
            
            tab = "ALTER TABLE sbe16 ADD volt4  numeric";
            proc.execute(tab);            
            tab = "UPDATE sbe16 SET volt4 = d.parameter_value FROM raw_instrument_data d WHERE d.data_timestamp = sbe16.data_timestamp AND parameter_code = 'VOLT4' AND d.instrument_id = sbe16.instrument_id";                
            proc.execute(tab);
            
            tab = "ALTER TABLE sbe16 ADD volt5  numeric";
            proc.execute(tab);            
            tab = "UPDATE sbe16 SET volt5 = d.parameter_value FROM raw_instrument_data d WHERE d.data_timestamp = sbe16.data_timestamp AND parameter_code = 'VOLT5' AND d.instrument_id = sbe16.instrument_id";                
            proc.execute(tab);
            
            tab = "ALTER TABLE sbe16 ADD volt6  numeric";
            proc.execute(tab);            
            tab = "UPDATE sbe16 SET volt6 = d.parameter_value FROM raw_instrument_data d WHERE d.data_timestamp = sbe16.data_timestamp AND parameter_code = 'VOLT6' AND d.instrument_id = sbe16.instrument_id";                
            proc.execute(tab);
            
            proc.execute("SELECT data_timestamp, source_file_id, depth, volt1, volt2, volt3, volt4, volt5, volt6 FROM sbe16");
            results = (ResultSet) proc.getResultSet();
            ResultSetMetaData resultsMetaData = results.getMetaData();
            int colCount        = resultsMetaData.getColumnCount();

            while (results.next())
            {
                Vector data = new Vector();

                for ( int numcol = 1; numcol <= colCount; numcol++ )
                {
                    Object o = new Object();
                    o        = results.getObject(numcol);
                    if ( ! results.wasNull() )
                    {
                        data.addElement( o );
                    }
                    else
                    {
                        data.addElement( null );
                    }
                }

                SBE16Data row = new SBE16Data();
                row.setData(data);

                dataSet.add(row);
            }

            proc.execute("DROP Table sbe16");

            results.close();
            proc.close();
            conn.setAutoCommit(true);
        }
        catch(SQLException sex)
        {
            logger.error(sex);
            if (conn != null)
            {
                try
                {
                    conn.rollback();
                    conn.setAutoCommit(true);
                }
                catch (SQLException ex)
                {
                    logger.error(sex);
                }
            }
        }
        finally
        {
            try
            {
                if(results != null)
                    results.close();
                if(proc != null)
                    proc.close();
            }
            catch(SQLException sex)
            {
                logger.error(sex);
            }
        }

        insertData();
        
        String update = "UPDATE instrument_data_processors SET " 
                            + "processing_date = '" + Common.current() + "',"
                            + "count = "+ dataSet.size()
                            + " WHERE "
                            + "mooring_id = '" + selectedMooring.getMooringID() + "'"
                            + " AND class_name = '" + this.getClass().getName() + "'"
                            + " AND parameters = '" + paramToString()  + "'";

        Statement stmt;
        try
        {
            stmt = conn.createStatement();
            stmt.executeUpdate(update);
            logger.debug("Update raw table count " + dataSet.size());
        }
        catch (SQLException ex)
        {
            logger.error(ex);
        }                    
    }

    private void insertData()
    {
        boolean ok = true;

        for(int i = 0; i < dataSet.size(); i++)
        {
            SBE16Data row = dataSet.get(i);

            RawInstrumentData rid = new RawInstrumentData();

            rid.setDataTimestamp(row.dataTimestamp);
            rid.setDepth(row.instrumentDepth);
            rid.setSourceFileID(row.sourceFileID);
            rid.setLatitude(selectedMooring.getLatitudeIn());
            rid.setLongitude(selectedMooring.getLongitudeIn());
            rid.setMooringID(selectedMooring.getMooringID());
            rid.setQualityCode("EXTRACTED");

            if (SBE43Instrument != null)
            {
                rid.setInstrumentID(SBE43Instrument.getInstrumentID());
                rid.setParameterCode("SBE43_OXY_VOLTAGE");
                rid.setParameterValue(row.Volt1);
                ok = rid.insert();
            }

            if (PARInstrument != null)
            {
                rid.setInstrumentID(PARInstrument.getInstrumentID());
                rid.setParameterCode("PAR_VOLT");
                rid.setParameterValue(row.Volt2);
                ok = rid.insert();
            }

            if (FLNTUSInstrument != null)
            {
                rid.setInstrumentID(FLNTUSInstrument.getInstrumentID());
                rid.setParameterCode("ECO_FLNTUS_CHL_VOLT");
                rid.setParameterValue(row.Volt3);
                ok = rid.insert();

                rid.setParameterCode("ECO_FLNTUS_TURB_VOLT");
                rid.setParameterValue(row.Volt4);
                ok = rid.insert();
            }


            if (OptodeInstrument != null)
            {
                constants = new AanderraOptodeConstants();

                if (jCheckBoxOxygen.isSelected())
                {
                    rid.setParameterCode("OPTODE_VOLT");
                }
                else
                {
                    rid.setParameterCode("OPTODE_BPHASE_VOLT");                
                }
                rid.setInstrumentID(OptodeInstrument.getInstrumentID());
                rid.setParameterValue(row.Volt5);
                ok = rid.insert();

                rid.setInstrumentID(OptodeInstrument.getInstrumentID());
                rid.setParameterCode("OPTODE_TEMP_VOLT");
                rid.setParameterValue(row.Volt6);
                ok = rid.insert();

                rid.setQualityCode("DERIVED");            
                if (!jCheckBoxOxygen.isSelected())
                {
                    // This probably should be in the Aandera calculation form
                    rid.setParameterCode("OPTODE_BPHASE");
                    rid.setParameterValue(constants.BPhaseVoltConstant + (constants.BPhaseVoltMultiplier * row.Volt5));
                    ok = rid.insert();
                }

                rid.setParameterCode("OPTODE_TEMP");
                rid.setParameterValue(constants.TempVoltConstant + (constants.TempVoltMultiplier * row.Volt6));
                ok = rid.insert();
            }
        }
    }

    private void displayData()
    {
        SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
        String $HOME = System.getProperty("user.home");

        //String filename = $HOME + "/SBE16_" + df.format(Common.current());
        String filename = "SBE16_" + df.format(Common.current());
        TextFileLogger file = new TextFileLogger(filename,"csv");

        try
        {
            String header = "Timestamp," 
                    + "Volt1,"
                    + "Volt2,"
                    + "Volt3, "
                    + "Volt4, " 
                    + "Volt5, " 
                    + "Volt6, " ;

            file.open();

            file.receiveLine(header);

            System.out.println(header);

            for(int i = 0; i < dataSet.size(); i++)
            {
                SBE16Data row = dataSet.get(i);

                System.out.println(
                        row.dataTimestamp
                        + ","
                        + row.Volt1
                        + ","
                        + row.Volt2
                        + ","
                        + row.Volt3
                        + ","
                        + row.Volt4
                        + ","
                        + row.Volt5
                        + ","
                        + row.Volt6
                        );

                file.receiveLine(
                        row.dataTimestamp
                        + ","
                        + row.Volt1
                        + ","
                        + row.Volt2
                        + ","
                        + row.Volt3
                        + ","
                        + row.Volt4
                        + ","
                        + row.Volt5
                        + ","
                        + row.Volt6
                        );
            }

            file.close();
        }
        catch(IOException ioex)
        {
            logger.error(ioex);
        }
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String[] args)
    {
        try
        {
	    // Set cross-platform Java L&F (also called "Metal")
            UIManager.setLookAndFeel(
            UIManager.getCrossPlatformLookAndFeelClassName());
        }
        catch (UnsupportedLookAndFeelException e)
        {
           // handle exception
        }
        catch (ClassNotFoundException e)
        {
           // handle exception
        }
        catch (InstantiationException e)
        {
           // handle exception
        }
        catch (IllegalAccessException e)
        {
           // handle exception
        }

        String $HOME = System.getProperty("user.home");
        PropertyConfigurator.configure("log4j.properties");
        Common.build("ABOS.properties");

        SBE16CalculationForm form = new SBE16CalculationForm();
        if (args.length > 0)
        {
            form.setupFromString(args[0]);
            form.calculateDataValues();
        }
        else
        {       
            form.initialise();
        }
    }

    public String paramToString()
    {
        String s = "MOORING="+selectedMooring.getMooringID() + ",SRC_INST="+sourceInstrument.getInstrumentID();
        if (SBE43Instrument != null)
            s += ",SBE43_INST="+SBE43Instrument.getInstrumentID();
        if (PARInstrument != null)
            s += ",PAR_INST="+PARInstrument.getInstrumentID();
        if (FLNTUSInstrument != null)
            s += ",FLNTUS_INST="+FLNTUSInstrument.getInstrumentID();
        if (OptodeInstrument != null)
            s += ",OPTODE_INST="+OptodeInstrument.getInstrumentID();

        return s;                
    }

    public boolean setupFromString(String s)
    {
        Matcher mat = Pattern.compile("(?:MOORING= *)(([^,]*))").matcher(s);
        mat.find();
        
        String mooringId = mat.group(2);
        
        mat = Pattern.compile("(?:SRC_INST= *)(([^,]*))").matcher(s);
        mat.find();
        
        int srcInstrumentId = Integer.parseInt(mat.group(2));
        
        mat = Pattern.compile("(?:SBE43_INST= *)(([^,]*))").matcher(s);
        mat.find();
                
        int SBE43InstrumentId = Integer.parseInt(mat.group(2));
        
        mat = Pattern.compile("(?:PAR_INST= *)(([^,]*))").matcher(s);
        mat.find();
                
        int PARInstrumentId = Integer.parseInt(mat.group(2));
        
        mat = Pattern.compile("(?:FLNTUS_INST= *)(([^,]*))").matcher(s);
        mat.find();
                
        int FLNTUSInstrumentId = Integer.parseInt(mat.group(2));
        
        mat = Pattern.compile("(?:OPTODE_INST= *)(([^,]*))").matcher(s);
        mat.find();
                
        int OptodeInstrumentId = Integer.parseInt(mat.group(2));
        
        selectedMooring = Mooring.selectByMooringID(mooringId);
        
        sourceInstrument = Instrument.selectByInstrumentID(srcInstrumentId);
        SBE43Instrument = Instrument.selectByInstrumentID(SBE43InstrumentId);
        PARInstrument = Instrument.selectByInstrumentID(PARInstrumentId);
        FLNTUSInstrument = Instrument.selectByInstrumentID(FLNTUSInstrumentId);
        OptodeInstrument = Instrument.selectByInstrumentID(OptodeInstrumentId);
        
        return true;
    }

    private class SBE16Data
    {
        public Timestamp dataTimestamp;
        public Integer sourceFileID;
        public Double instrumentDepth;

        public Double Volt1;
        public Double Volt2;
        public Double Volt3;
        public Double Volt4;
        public Double Volt5;
        public Double Volt6;

        public void setData(Vector row)
        {
            int i = 0;

            dataTimestamp = (Timestamp) row.elementAt(i++);
            sourceFileID = ((Number)row.elementAt(i++)).intValue();
            instrumentDepth = ((Number)row.elementAt(i++)).doubleValue();

            Volt1 = ((Number)row.elementAt(i++)).doubleValue();
            Volt2 = ((Number)row.elementAt(i++)).doubleValue();
            Volt3 = ((Number)row.elementAt(i++)).doubleValue();
            Volt4 = ((Number)row.elementAt(i++)).doubleValue();                
            Volt5 = ((Number)row.elementAt(i++)).doubleValue();                
            Volt6 = ((Number)row.elementAt(i++)).doubleValue();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.imos.dwm.dbms.fields.InstrumentSelectorCombo FLNTUSInstrumentCombo;
    private org.imos.dwm.dbms.fields.InstrumentSelectorCombo GTDInstrumentCombo;
    private org.imos.dwm.dbms.fields.InstrumentSelectorCombo OptodeInstrumentCombo;
    private org.imos.dwm.dbms.fields.InstrumentSelectorCombo PARInstrumentCombo;
    private org.imos.dwm.dbms.fields.InstrumentSelectorCombo SBE43InstrumentCombo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox deleteDataBox;
    private javax.swing.JCheckBox jCheckBoxOxygen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private org.imos.dwm.dbms.fields.MooringCombo mooringCombo1;
    private org.wiley.util.basicField mooringDescriptionField;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton runButton;
    private org.imos.dwm.dbms.fields.InstrumentSelectorCombo sourceInstrumentCombo;
    // End of variables declaration//GEN-END:variables

}
